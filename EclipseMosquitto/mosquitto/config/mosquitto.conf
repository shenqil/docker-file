# Config file for mosquitto
#
# See mosquitto.conf(5) for more information.
#
# Default values are shown, uncomment to change.
#
# Use the # character to indicate a comment, but only if it is the
# very first character on the line.

# =================================================================
# General configuration
# =================================================================

# Use per listener security settings.
#
# It is recommended this option be set before any other options.
#
# 如果此选项设置为 true，则所有身份验证和访问控制
# 选项基于每个侦听器进行控制。 以下选项是
# affected:
#
# acl_file
# allow_anonymous
# allow_zero_length_clientid
# auto_id_prefix
# password_file
# plugin
# plugin_opt_*
# psk_file
#
# 请注意，如果设置为 true，那么一个持久的客户端（即具有干净的会话集
# 为 false）已断开连接的将使用为
# 最近连接的监听器
#
# 默认行为是将此设置为 false，从而保持
# 设置早期版本的 mosquitto 的行为。
#per_listener_settings false


# 此选项控制是否允许客户端使用零长度客户端 ID 进行连接。
# 此选项仅影响使用 MQTT v3.1.1 及更高版本的客户端。
# 如果设置为 false，则使用零长度客户端 ID 连接的客户端将断开连接。
# 如果设置为 true，则代理将为客户端分配一个客户端 ID。
# 这意味着它只对 clean session 设置为 true 的客户端有用。
#allow_zero_length_clientid true

# 如果 allow_zero_length_clientid 为 true，
# 则此选项允许您为自动生成的客户端 ID 设置前缀，
# 以帮助查看日志。默认为“自动-”
#auto_id_prefix auto-

# 此选项会影响客户端订阅已保留消息的主题时的场景。
# 向主题发布保留消息的客户端可能在发布时具有访问权限，
# 但该访问权限随后已被删除。
# 如果 check_retain_source 设置为 true，
# 默认情况下，保留消息的来源将在重新发布之前检查访问权限。
# 设置为 false 时，将不进行检查，并且将始终发布保留的消息。这会影响所有听众。
#check_retain_source true

# QoS 1 和 2 消息将被允许在每个客户端传输，
# 直到超过此限制。默认为 0。（无最大值）另见 max_inflight_messages
#max_inflight_bytes 0

# 每个客户端当前传输的 QoS 1 和 2 消息的最大数量。
# 这包括在握手过程中的消息和正在重试的消息。默认为 20。
# 设置为 0 表示没有最大值。
# 设置为 1 将保证 QoS 1 和 2 消息的有序传递。
#max_inflight_messages 20

# 对于 MQTT v5 客户端，可以让服务器发送“服务器保持连接”值，
# 该值将覆盖客户端设置的保持连接值。
# 这旨在用作一种机制，说明服务器将比预期更早地断开客户端连接，
# 并且客户端应该使用新的 keepalive 值。
# max_keepalive 选项允许您指定客户端只能使用小于或等于此值的 keepalive 进行连接，
# 否则将向它们发送服务器 keepalive，告诉它们使用 max_keepalive。
# 这仅适用于 MQTT v5 客户端。允许的最大值为 65535。不要设置低于 10。
#
# 对于 MQTT v3.1.1 和 v3.1 客户端，
# 没有机制告诉客户端他们应该使用什么 keepalive 值。
# 如果 MQTT v3.1.1 或 v3.1 客户端指定的 keepalive 时间大于 max_keepalive，
# 它们将收到带有“标识符被拒绝”原因代码的 CONNACK 消息，并断开连接。
#
#max_keepalive 65535

# 对于 MQTT v5 客户端，可以让服务器发送“最大数据包大小”值，
# 该值将指示客户端不会接受大小大于 max_packet_size 字节的 MQTT 数据包。
# 这适用于完整的 MQTT 数据包，而不仅仅是有效负载。
# 将此选项设置为正值会将最大数据包大小设置为该字节数。
# 如果客户端发送大于此值的数据包，它将被断开连接。
# 这适用于所有客户端，无论它们使用何种协议版本，
# 但 v3.1.1 和更早版本的客户端当然不会收到最大数据包大小信息。
# 默认为无限制。
# 禁止设置低于 20 字节，因为它可能会干扰普通客户端操作，即使负载非常小。
#max_packet_size 0

# 高于当前传输中的 QoS 1 和 2 消息将按客户端排队，直到超过此限制。
# 默认为 0。（无最大值）另见 max_queued_messages。
# 如果同时指定了 max_queued_messages 和 max_queued_bytes，
# 则数据包将排队直到达到第一个限制。
#max_queued_bytes 0

# 设置支持的最大 QoS。以高于此处指定的 QoS 发布的客户端将断开连接。
#max_qos 2

# 每个客户端在队列中保留的 QoS 1 和 2 消息的最大数量，
# 高于当前正在传输的消息。默认为 1000。
# 设置为 0 表示没有最大值（不推荐）。
# 另请参阅 queue_qos0_messages。
# 另见 max_queued_bytes。
#max_queued_messages 1000
#
# 此选项设置代理将分配的最大堆内存字节数，从而对代理使用的内存设置硬限制。
# 超过此值的内存请求将被拒绝。
# 效果将根据被拒绝的内容而有所不同。
# 如果正在处理传入的消息，
# 则该消息将被丢弃并且发布客户端将断开连接。
# 如果正在发送传出消息，则单个消息将被丢弃并且接收客户端将断开连接。
# 默认为无限制。
#memory_limit 0

# 此选项设置代理将允许的最大发布负载大小。
# 代理将不接受接收到的超过此大小的消息。
# 默认值为 0，表示接受所有有效的 MQTT 消息。
# MQTT 规定的最大负载大小为 268435455 字节。
#message_size_limit 0

# 如果持久客户端（干净会话设置为 false 的客户端）未在特定时间范围内重新连接，则此选项允许将其删除。
#
# 这是 MQTT V3.1 中的非标准选项，但在 MQTT v3.1.1 中是允许的。
#
# 设计不当的客户端可能会在使用随机生成的客户端 ID 时将 clean session 设置为 false。
# 这导致永远不会重新连接的持久客户端。此选项允许删除这些客户端。
#
# 过期时间应该是一个整数，后跟 h d w m y 之一，分别表示小时、天、周、月和年。例如
#
# persistent_client_expiration 2m
# persistent_client_expiration 14d
# persistent_client_expiration 1y
#
# 如果未设置，则默认值是永不过期的持久客户端。
#persistent_client_expiration

# 将进程 ID 写入文件。默认为空字符串，这意味着不应写入 pid 文件。
# This should be set to /var/run/mosquitto/mosquitto.pid if mosquitto is
# being run automatically on boot with an init script and
# start-stop-daemon or similar.
#pid_file

# 设置为 true 以在持久客户端断开连接时使用 QoS 0 对消息进行排队。
# 这些消息包含在 max_queued_messages 和 max_queued_bytes 施加的限制中
# Defaults to false.
# 这是 MQTT v3.1 规范的非标准选项，但在 v3.1.1 中是允许的。
#queue_qos0_messages false

# 设置为 false 以禁用保留消息支持。
# 如果客户端发布设置了保留位的消息，如果设置为 false，它将断开连接。
#retain_available true

# 在客户端套接字上禁用 Nagle 算法。
# 这具有减少单个消息的延迟的效果，但可能会增加发送的数据包数量。
#set_tcp_nodelay false

# SYS 树更新之间的时间（以秒为单位）。
# 设置为 0 以禁用 SYS 树的发布。
#sys_interval 10

# MQTT 规范要求传递给订阅者的消息的 QoS 永远不会升级以匹配订阅的 QoS。
# 启用此选项会更改此行为。
# 如果 upgrade_outgoing_qos 设置为 true，
# 则发送给订阅者的消息将始终与其订阅的 QoS 匹配。
# 这是规范明确禁止的非标准选项。
#upgrade_outgoing_qos false

# 以 root 身份运行时，删除此用户及其主要组的权限。
# 设置为 root 以保持 root 身份，但不建议这样做。
# 如果设置为“mosquitto”，或未设置，并且“mosquitto”用户不存在，那么它会将权限授予“nobody”用户。
# 如果以非 root 用户身份运行，则此设置无效。
# 请注意，在 Windows 上这不起作用，因此 mosquitto 应该由您希望它运行的用户启动。
#user mosquitto

# =================================================================
# Listeners
# =================================================================

# 侦听 port ip 地址组合。通过多次使用这个变量，mosquitto 可以监听多个端口。
# 如果使用了这个变量并且没有给出 bind_address 和 port，那么默认的监听器将不会被启动。
# 必须给出监听的端口号。可选地，可以提供 IP 地址或主机名作为第二个参数。
# 在这种情况下，mosquitto 将尝试将侦听器绑定到该地址，从而限制对相关网络和接口的访问。
# 默认情况下，mosquitto 将侦听所有接口。请注意，对于 websockets 侦听器，不可能绑定到主机名。
#
# 在支持 Unix 域套接字的系统上，也可以创建 Unix 套接字而不是打开 TCP 套接字。
# 在这种情况下，端口号应设置为 0 并且必须提供 unix 套接字路径，例如
# listener 0 /tmp/mosquitto.sock
#
# listener port-number [ip address/host name/unix socket path]
listener 1883

# 默认情况下，侦听器将尝试侦听所有支持的 IP 协议版本。
# 如果您没有 IPv4 或 IPv6 接口，您可能希望禁用对其中任一协议版本的支持。
# 特别要注意的是，由于 websockets 库的限制，
# 如果编译了 IPv6 支持，它只会尝试打开 IPv6 套接字，
# 如果 IPv6 不可用，它就会失败。
#
# 设置为 `ipv4` 强制侦听器仅使用 IPv4，
# 或设置为 `ipv6` 强制侦听器仅使用 IPv6。
# 如果您希望同时支持 IPv4 和 IPv6，
# 则不要使用 socket_domain 选项。
#
#socket_domain

# 将侦听器绑定到特定接口。
# 这类似于侦听器定义的 [ip addresshost name] 部分，
# 但在接口具有多个地址或地址可能更改时很有用。
# 如果与侦听器定义的 [ip addresshost name] 部分一起使用，
# 则 bind_interface 选项将优先。
# 在 Windows 上不可用。
#
# Example: bind_interface eth0
#bind_interface

# 当侦听器使用 websockets 协议时，也可以提供 http 数据。
# 将 http_dir 设置为包含您希望提供的文件的目录。
# 如果未指定此选项，则无法进行正常的 http 连接。
#http_dir

# 允许的最大客户端连接数。这是每个侦听器的设置。
# 默认为 -1，表示无限连接。
# 请注意，其他进程限制意味着无限制的连接实际上是不可能的。
# 通常，可能的默认最大连接数约为 1024。
#max_connections -1

# 可以使用 mount_point 选项将侦听器限制为在主题层次结构内运行。
# 这是通过为连接到此侦听器的任何客户端的所有主题添加 mount_point 字符串前缀来实现的。
# 这种前缀只发生在代理内部；客户端将看不到前缀。
#mount_point

# 选择收听时使用的协议。
# 这可以是 mqtt 或 websockets。
# 基于证书的 TLS 可与 websockets 一起使用，
# 但仅支持 cafile、certfile、keyfile、ciphers 和 ciphers_tls13 选项。
#protocol mqtt

# 将 use_username_as_clientid 设置为 true
# 以用其用户名替换客户端连接的 clientid。
# 这允许将身份验证绑定到 clientid，
# 这意味着可以防止一个客户端使用相同的 clientid 断开另一个客户端的连接。
# 如果客户端连接时没有用户名，当此选项设置为 true 时，它​​将被断开为未授权.
# 不要与 clientid_prefixes 一起使用.
# 另见 use_identity_as_username.
#use_username_as_clientid

# 更改 websockets 标头大小。这是一个全局选项，无法为每个侦听器设置.
# 此选项设置读取 HTTP 标头时 libwebsockets 库中使用的缓冲区的大小.
# 如果您要传递大标题数据（例如 cookie），则可能需要增加此值. 
# 如果未设置或设置为 0，则将使用默认值 1024 字节。
#websockets_headers_size

# -----------------------------------------------------------------
# Certificate based SSL/TLS support
# -----------------------------------------------------------------
# 以下选项可用于启用基于证书的 SSL/TLS 支持
# 对于这个监听器。 请注意，MQTT over TLS 的推荐端口是 8883，
# 但这必须手动设置。
#
# 另请参阅 mosquitto-tls 手册页和“基于预共享密钥的 SSL/TLS”
# 支持”部分。只能支持证书或 PSK 加密之一
# 为任何监听器启用。

# certfile 和 keyfile 都必须定义以启用基于证书的
# TLS 加密。

# PEM 编码的服务器证书的路径。
#certfile

# PEM 编码的密钥文件的路径。
#keyfile

# 如果您希望控制使用哪些加密密码，请使用密码
# 选项。 可用密码列表可以使用“openssl
# ciphers”命令，并且应该以与输出相同的格式提供
# 那个命令。 这仅适用于 TLS 1.2 和更早版本。 用
# ciphers_tls1.3 用于 TLS v1.3。
#ciphers

# 选择用于此侦听器的 TLS v1.3 密码套件。
# Defaults to "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256"
#ciphers_tls1.3

# 如果你的require_certificate设置为true，你就可以创建一个证书
# 撤销列表文件以撤销对特定客户端证书的访问。 如果
# 你已经这样做了，使用 crlfile 指向 PEM 编码的撤销文件。
#crlfile

# 允许使用临时 DH 密钥交换，它提供转发
# 安全，监听器必须加载DH参数。 这可以指定为
# dhparamfile 选项。 可以使用以下命令生成 dhparamfile
# 例如 “openssl dhparam -out dhparam.pem 2048”
#dhparamfile

# 默认情况下，启用 TLS 的侦听器将以类似于
# 启用 https 的 Web 服务器，因为该服务器具有由 CA 签署的证书
# 并且客户端将验证它是受信任的证书。 总体目标
# 是网络流量的加密。 通过将 require_certificate 设置为 true，
# 客户端必须提供有效的证书才能访问网络
# 连接继续。 这允许控制对代理的访问
# 在 MQTT 提供的机制之外。
#require_certificate false

# cafile 和 capath 定义访问 PEM 编码的方法
# 将被视为受信任的证书颁发机构证书
# 检查传入的客户端证书。
# cafile 定义包含 CA 证书的文件的路径。
# capath 定义了一个将被搜索文件的目录
# 包含 CA 证书。 为了使 capath 正常工作，
# 证书文件必须以“.crt”作为文件结尾，您必须运行
# "openssl rehash <path to capath>" 每次添加/删除证书时。
#cafile
#capath


# 如果 require_certificate 为 true，则可以将 use_identity_as_username 设置为 true
# 使用客户端证书中的 CN 值作为用户名。 如果这是
# true，password_file 选项将不会用于此侦听器。
#use_identity_as_username false

# -----------------------------------------------------------------
# Pre-shared-key based SSL/TLS support
# -----------------------------------------------------------------
# 以下选项可用于启用基于 PSK 的 SSL/TLS 支持
# 这个监听器。 请注意，MQTT over TLS 的推荐端口为 8883，但
# 这必须手动设置。
#
# 另请参阅 mosquitto-tls 手册页和“基于证书的 SSL/TLS
# 支持”部分。只能支持证书或 PSK 加密之一
# 为任何监听器启用。

# psk_hint 选项启用此侦听器的预共享密钥支持
# 充当此侦听器的标识符。 提示被发送给客户端，并且可能
# 在本地使用以辅助身份验证。 提示是一个自由形式的字符串
# 本身没有多大意义，所以请随意发挥创意。
# 如果提供此选项，请参阅 psk_file 以定义要使用的预共享密钥
# 使用或创建一个安全插件来处理它们。
#psk_hint

# 当使用 PSK 时，使用的加密密码将从列表中选择
# 可用的 PSK 密码。 如果您想控制哪些密码可用，
# 使用“密码”选项。 可以选择可用密码列表
# 使用“openssl ciphers”命令并且应该以相同的格式提供
# 作为该命令的输出。
#ciphers

# 设置use_identity_as_username 使用客户端发送的psk身份
# 作为它的用户名。 认证将使用 PSK 而不是
# MQTT 用户名/密码和 password_file 将不会用于此侦听器。
#use_identity_as_username false


# =================================================================
# Persistence
# =================================================================

# 如果启用持久化，则将内存数据库保存到磁盘
# 每 autosave_interval 秒。 如果设置为 0，则持久性
# 数据库只会在 mosquitto 退出时写入。 也可以看看
# autosave_on_changes。
# 注意持久化数据库的写入可以通过
# 向mosquitto 发送 SIGUSR1 信号。
#autosave_interval 1800

# 如果为true，mosquitto会统计订阅变化的次数，保留
# 收到的消息和排队的消息，如果总数超过
# autosave_interval 那么内存数据库将被保存到磁盘。
# 如果为 false，mosquitto 将通过处理将内存中的数据库保存到磁盘
# autosave_interval 以秒为单位的时间。
#autosave_on_changes false

# 将持久消息数据保存到磁盘（真/假）。 这会保存有关所有消息的信息，包括订阅、当前传输中的消息和保留的消息。
# reserved_persistence 是此选项的同义词。
persistence true

# 用于持久数据库的文件名，不包括路径。
persistence_file mosquitto.db

# 持久化数据库的位置。
# 默认为空字符串（当前目录）。
# 设置为例如 /var/lib/mosquitto 如果在 Linux 或类似设备上作为适当的服务运行。
persistence_location /mosquitto/data/


# =================================================================
# Logging
# =================================================================

# Places to log to. Use multiple log_dest lines for multiple
# logging destinations.
# Possible destinations are: stdout stderr syslog topic file dlt
#
# stdout and stderr log to the console on the named output.
#
# syslog uses the userspace syslog facility which usually ends up
# in /var/log/messages or similar.
#
# topic logs to the broker topic '$SYS/broker/log/<severity>',
# where severity is one of D, E, W, N, I, M which are debug, error,
# warning, notice, information and message. Message type severity is used by
# the subscribe/unsubscribe log_types and publishes log messages to
# $SYS/broker/log/M/susbcribe or $SYS/broker/log/M/unsubscribe.
#
# The file destination requires an additional parameter which is the file to be
# logged to, e.g. "log_dest file /var/log/mosquitto.log". The file will be
# closed and reopened when the broker receives a HUP signal. Only a single file
# destination may be configured.
#
# The dlt destination is for the automotive `Diagnostic Log and Trace` tool.
# This requires that Mosquitto has been compiled with DLT support.
#
# Note that if the broker is running as a Windows service it will default to
# "log_dest none" and neither stdout nor stderr logging is available.
# Use "log_dest none" if you wish to disable logging.
log_dest file /mosquitto/log/mosquitto.log

# Types of messages to log. Use multiple log_type lines for logging
# multiple types of messages.
# Possible types are: debug, error, warning, notice, information,
# none, subscribe, unsubscribe, websockets, all.
# Note that debug type messages are for decoding the incoming/outgoing
# network packets. They are not logged in "topics".
#log_type error
#log_type warning
#log_type notice
log_type all


# If set to true, client connection and disconnection messages will be included
# in the log.
#connection_messages true

# If using syslog logging (not on Windows), messages will be logged to the
# "daemon" facility by default. Use the log_facility option to choose which of
# local0 to local7 to log to instead. The option value should be an integer
# value, e.g. "log_facility 5" to use local5.
#log_facility

# If set to true, add a timestamp value to each log message.
log_timestamp true

# Set the format of the log timestamp. If left unset, this is the number of
# seconds since the Unix epoch.
# This is a free text string which will be passed to the strftime function. To
# get an ISO 8601 datetime, for example:
# log_timestamp_format %Y-%m-%dT%H:%M:%S
log_timestamp_format %Y-%m-%dT%H:%M:%S

# Change the websockets logging level. This is a global option, it is not
# possible to set per listener. This is an integer that is interpreted by
# libwebsockets as a bit mask for its lws_log_levels enum. See the
# libwebsockets documentation for more details. "log_type websockets" must also
# be enabled.
#websockets_log_level 0


# =================================================================
# Security
# =================================================================

# 如果设置，只有在其上具有匹配前缀的客户端
# clientid 将被允许连接到代理。 默认情况下，
# 所有客户端都可以连接。
# 例如，这里设置“secure-”意味着客户端“secure-client”可以连接，
#而另一个客户端id为“mqtt”的客户端不能。
#clientid_prefixes

# 布尔值，用于确定是否允许在不提供用户名的情况下连接的客户端进行连接。 
# 如果设置为 false，则应创建密码文件（请参阅 password_file 选项）以控制经过身份验证的客户端访问。
#
# 默认为false，除非配置文件中没有定义监听器，在这种情况下设置为true，但只允许从本地机器连接。
allow_anonymous false

# -----------------------------------------------------------------
# Default authentication and topic access control
# -----------------------------------------------------------------

# 使用密码文件控制对代理的访问。 这个文件可以
# 使用 mosquitto_passwd 实用程序生成。 
# 如果 TLS 支持未编译到 mosquitto（建议应包含 TLS 支持），
# 则使用纯文本密码，在这种情况下，文件应为具有以下格式行的文本文件：
# username:password
# 如果需要，可以省略密码（和冒号），尽管这对安全性的影响很小。
#
# 请参阅 TLS 客户端 require_certificate 和 use_identity_as_username 选项以获取替代身份验证选项。
# 如果使用插件以及 password_file，将首先进行插件检查。
# password_file /mosquitto/pwfile

# Access may also be controlled using a pre-shared-key file. This requires
# TLS-PSK support and a listener configured to use it. The file should be text
# lines in the format:
# identity:key
# The key should be in hexadecimal format without a leading "0x".
# If an plugin is used as well, the plugin check will be made first.
#psk_file

# Control access to topics on the broker using an access control list
# file. If this parameter is defined then only the topics listed will
# have access.
# If the first character of a line of the ACL file is a # it is treated as a
# comment.
# Topic access is added with lines of the format:
#
# topic [read|write|readwrite|deny] <topic>
#
# The access type is controlled using "read", "write", "readwrite" or "deny".
# This parameter is optional (unless <topic> contains a space character) - if
# not given then the access is read/write.  <topic> can contain the + or #
# wildcards as in subscriptions.
#
# The "deny" option can used to explicity deny access to a topic that would
# otherwise be granted by a broader read/write/readwrite statement. Any "deny"
# topics are handled before topics that grant read/write access.
#
# The first set of topics are applied to anonymous clients, assuming
# allow_anonymous is true. User specific topic ACLs are added after a
# user line as follows:
#
# user <username>
#
# The username referred to here is the same as in password_file. It is
# not the clientid.
#
#
# If is also possible to define ACLs based on pattern substitution within the
# topic. The patterns available for substition are:
#
# %c to match the client id of the client
# %u to match the username of the client
#
# The substitution pattern must be the only text for that level of hierarchy.
#
# The form is the same as for the topic keyword, but using pattern as the
# keyword.
# Pattern ACLs apply to all users even if the "user" keyword has previously
# been given.
#
# If using bridges with usernames and ACLs, connection messages can be allowed
# with the following pattern:
# pattern write $SYS/broker/connection/%c/state
#
# pattern [read|write|readwrite] <topic>
#
# Example:
#
# pattern write sensor/%u/data
#
# If an plugin is used as well as acl_file, the plugin check will be
# made first.
# acl_file /mosquitto/aclfile

# -----------------------------------------------------------------
# External authentication and topic access plugin options
# -----------------------------------------------------------------

# 可以通过插件选项支持外部身份验证和访问控制。 这是可加载插件的路径。 另请参阅下面描述的 plugin_opt_* 选项。
#
# #插件选项可以指定多次加载多个插件。 
# 插件将按照它们在此处指定的顺序进行处理。 
# 如果在 password_file 或 acl_file 中指定了插件选项，则将首先进行插件检查。
#
# 如果 per_listener_settings 选项为 false，则插件将应用于所有侦听器。 
# 如果 per_listener_settings 为 true，则插件将仅应用于当前定义的侦听器。
#
# 此选项也可用作`auth_plugin`，但不推荐使用此用法
# 并且将来会被删除。
#
plugin /mosquitto/dll/mosquitto_payload_modification.so

# 如果使用了上面的插件选项，定义选项传递给
# plugin here 如插件说明中所述。 命名的所有选项
# 使用 plugin_opt_* 格式将被传递给插件，例如：
#
# 此选项也可用作`auth_opt_*`，但不推荐使用此用法
# 并且将来会被删除。
#
plugin_opt_grpc_path /mosquitto/dll/grpc_auth.so
plugin_opt_grpc_addr 127.0.0.1:10086
# plugin_opt_db_username
# plugin_opt_db_password


# =================================================================
# Bridges
# =================================================================

# A bridge is a way of connecting multiple MQTT brokers together.
# Create a new bridge using the "connection" option as described below. Set
# options for the bridges using the remaining parameters. You must specify the
# address and at least one topic to subscribe to.
#
# Each connection must have a unique name.
#
# The address line may have multiple host address and ports specified. See
# below in the round_robin description for more details on bridge behaviour if
# multiple addresses are used. Note that if you use an IPv6 address, then you
# are required to specify a port.
#
# The direction that the topic will be shared can be chosen by
# specifying out, in or both, where the default value is out.
# The QoS level of the bridged communication can be specified with the next
# topic option. The default QoS level is 0, to change the QoS the topic
# direction must also be given.
#
# The local and remote prefix options allow a topic to be remapped when it is
# bridged to/from the remote broker. This provides the ability to place a topic
# tree in an appropriate location.
#
# For more details see the mosquitto.conf man page.
#
# Multiple topics can be specified per connection, but be careful
# not to create any loops.
#
# If you are using bridges with cleansession set to false (the default), then
# you may get unexpected behaviour from incoming topics if you change what
# topics you are subscribing to. This is because the remote broker keeps the
# subscription for the old topic. If you have this problem, connect your bridge
# with cleansession set to true, then reconnect with cleansession set to false
# as normal.
#connection <name>
#address <host>[:<port>] [<host>[:<port>]]
#topic <topic> [[[out | in | both] qos-level] local-prefix remote-prefix]

# If you need to have the bridge connect over a particular network interface,
# use bridge_bind_address to tell the bridge which local IP address the socket
# should bind to, e.g. `bridge_bind_address 192.168.1.10`
#bridge_bind_address

# If a bridge has topics that have "out" direction, the default behaviour is to
# send an unsubscribe request to the remote broker on that topic. This means
# that changing a topic direction from "in" to "out" will not keep receiving
# incoming messages. Sending these unsubscribe requests is not always
# desirable, setting bridge_attempt_unsubscribe to false will disable sending
# the unsubscribe request.
#bridge_attempt_unsubscribe true

# Set the version of the MQTT protocol to use with for this bridge. Can be one
# of mqttv50, mqttv311 or mqttv31. Defaults to mqttv311.
#bridge_protocol_version mqttv311

# Set the clean session variable for this bridge.
# When set to true, when the bridge disconnects for any reason, all
# messages and subscriptions will be cleaned up on the remote
# broker. Note that with cleansession set to true, there may be a
# significant amount of retained messages sent when the bridge
# reconnects after losing its connection.
# When set to false, the subscriptions and messages are kept on the
# remote broker, and delivered when the bridge reconnects.
#cleansession false

# Set the amount of time a bridge using the lazy start type must be idle before
# it will be stopped. Defaults to 60 seconds.
#idle_timeout 60

# Set the keepalive interval for this bridge connection, in
# seconds.
#keepalive_interval 60

# Set the clientid to use on the local broker. If not defined, this defaults to
# 'local.<clientid>'. If you are bridging a broker to itself, it is important
# that local_clientid and clientid do not match.
#local_clientid

# If set to true, publish notification messages to the local and remote brokers
# giving information about the state of the bridge connection. Retained
# messages are published to the topic $SYS/broker/connection/<clientid>/state
# unless the notification_topic option is used.
# If the message is 1 then the connection is active, or 0 if the connection has
# failed.
# This uses the last will and testament feature.
#notifications true

# Choose the topic on which notification messages for this bridge are
# published. If not set, messages are published on the topic
# $SYS/broker/connection/<clientid>/state
#notification_topic

# Set the client id to use on the remote end of this bridge connection. If not
# defined, this defaults to 'name.hostname' where name is the connection name
# and hostname is the hostname of this computer.
# This replaces the old "clientid" option to avoid confusion. "clientid"
# remains valid for the time being.
#remote_clientid

# Set the password to use when connecting to a broker that requires
# authentication. This option is only used if remote_username is also set.
# This replaces the old "password" option to avoid confusion. "password"
# remains valid for the time being.
#remote_password

# Set the username to use when connecting to a broker that requires
# authentication.
# This replaces the old "username" option to avoid confusion. "username"
# remains valid for the time being.
#remote_username

# Set the amount of time a bridge using the automatic start type will wait
# until attempting to reconnect.
# This option can be configured to use a constant delay time in seconds, or to
# use a backoff mechanism based on "Decorrelated Jitter", which adds a degree
# of randomness to when the restart occurs.
#
# Set a constant timeout of 20 seconds:
# restart_timeout 20
#
# Set backoff with a base (start value) of 10 seconds and a cap (upper limit) of
# 60 seconds:
# restart_timeout 10 30
#
# Defaults to jitter with a base of 5 and cap of 30
#restart_timeout 5 30

# If the bridge has more than one address given in the address/addresses
# configuration, the round_robin option defines the behaviour of the bridge on
# a failure of the bridge connection. If round_robin is false, the default
# value, then the first address is treated as the main bridge connection. If
# the connection fails, the other secondary addresses will be attempted in
# turn. Whilst connected to a secondary bridge, the bridge will periodically
# attempt to reconnect to the main bridge until successful.
# If round_robin is true, then all addresses are treated as equals. If a
# connection fails, the next address will be tried and if successful will
# remain connected until it fails
#round_robin false

# Set the start type of the bridge. This controls how the bridge starts and
# can be one of three types: automatic, lazy and once. Note that RSMB provides
# a fourth start type "manual" which isn't currently supported by mosquitto.
#
# "automatic" is the default start type and means that the bridge connection
# will be started automatically when the broker starts and also restarted
# after a short delay (30 seconds) if the connection fails.
#
# Bridges using the "lazy" start type will be started automatically when the
# number of queued messages exceeds the number set with the "threshold"
# parameter. It will be stopped automatically after the time set by the
# "idle_timeout" parameter. Use this start type if you wish the connection to
# only be active when it is needed.
#
# A bridge using the "once" start type will be started automatically when the
# broker starts but will not be restarted if the connection fails.
#start_type automatic

# Set the number of messages that need to be queued for a bridge with lazy
# start type to be restarted. Defaults to 10 messages.
# Must be less than max_queued_messages.
#threshold 10

# If try_private is set to true, the bridge will attempt to indicate to the
# remote broker that it is a bridge not an ordinary client. If successful, this
# means that loop detection will be more effective and that retained messages
# will be propagated correctly. Not all brokers support this feature so it may
# be necessary to set try_private to false if your bridge does not connect
# properly.
#try_private true

# Some MQTT brokers do not allow retained messages. MQTT v5 gives a mechanism
# for brokers to tell clients that they do not support retained messages, but
# this is not possible for MQTT v3.1.1 or v3.1. If you need to bridge to a
# v3.1.1 or v3.1 broker that does not support retained messages, set the
# bridge_outgoing_retain option to false. This will remove the retain bit on
# all outgoing messages to that bridge, regardless of any other setting.
#bridge_outgoing_retain true

# If you wish to restrict the size of messages sent to a remote bridge, use the
# bridge_max_packet_size option. This sets the maximum number of bytes for
# the total message, including headers and payload.
# Note that MQTT v5 brokers may provide their own maximum-packet-size property.
# In this case, the smaller of the two limits will be used.
# Set to 0 for "unlimited".
#bridge_max_packet_size 0


# -----------------------------------------------------------------
# Certificate based SSL/TLS support
# -----------------------------------------------------------------
# Either bridge_cafile or bridge_capath must be defined to enable TLS support
# for this bridge.
# bridge_cafile defines the path to a file containing the
# Certificate Authority certificates that have signed the remote broker
# certificate.
# bridge_capath defines a directory that will be searched for files containing
# the CA certificates. For bridge_capath to work correctly, the certificate
# files must have ".crt" as the file ending and you must run "openssl rehash
# <path to capath>" each time you add/remove a certificate.
#bridge_cafile
#bridge_capath


# If the remote broker has more than one protocol available on its port, e.g.
# MQTT and WebSockets, then use bridge_alpn to configure which protocol is
# requested. Note that WebSockets support for bridges is not yet available.
#bridge_alpn

# When using certificate based encryption, bridge_insecure disables
# verification of the server hostname in the server certificate. This can be
# useful when testing initial server configurations, but makes it possible for
# a malicious third party to impersonate your server through DNS spoofing, for
# example. Use this option in testing only. If you need to resort to using this
# option in a production environment, your setup is at fault and there is no
# point using encryption.
#bridge_insecure false

# Path to the PEM encoded client certificate, if required by the remote broker.
#bridge_certfile

# Path to the PEM encoded client private key, if required by the remote broker.
#bridge_keyfile

# -----------------------------------------------------------------
# PSK based SSL/TLS support
# -----------------------------------------------------------------
# Pre-shared-key encryption provides an alternative to certificate based
# encryption. A bridge can be configured to use PSK with the bridge_identity
# and bridge_psk options. These are the client PSK identity, and pre-shared-key
# in hexadecimal format with no "0x". Only one of certificate and PSK based
# encryption can be used on one
# bridge at once.
#bridge_identity
#bridge_psk


# =================================================================
# External config files
# =================================================================

# External configuration files may be included by using the
# include_dir option. This defines a directory that will be searched
# for config files. All files that end in '.conf' will be loaded as
# a configuration file. It is best to have this as the last option
# in the main file. This option will only be processed from the main
# configuration file. The directory specified must not contain the
# main configuration file.
# Files within include_dir will be loaded sorted in case-sensitive
# alphabetical order, with capital letters ordered first. If this option is
# given multiple times, all of the files from the first instance will be
# processed before the next instance. See the man page for examples.
#include_dir
